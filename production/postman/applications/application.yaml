apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: postman
  namespace: production
spec:
  project: production
  source:
    repoURL: https://dysnix.github.io/charts
    targetRevision: 0.99.16
    chart: app
    helm:
      values: |
        app:
          name: production
        image:
          repository: europe-west6-docker.pkg.dev/ctdapp-391309/ctdapp/cover-traffic
          tag: "v2.0.2"
        replicaCount: 1
        args:
          - /bin/sh
          - -c
          - |
            celery -A postman.postman_tasks.app worker -c 4 -n worker@%h -l info -E -Q "send_messages"
        env:
          PARAM_BATCH_SIZE: 100
          PARAM_DELAY_BETWEEN_TWO_MESSAGES: 0.3
          PARAM_MESSAGE_DELIVERY_TIMEOUT: 15
          PARAM_MAX_ATTEMPTS: 6

          RABBITMQ_PROJECT_NAME: ct-app
          PGSSLCERT: "/etc/postgres/certs/tls.crt"
          PGSSLKEY: "/etc/postgres/certs/tls.key"
          PGSSLROOTCERT: "/etc/postgres/certs/ca.crt"
          PGSSLMODE: verify-ca
        extraVolumeMounts:
          - name: postgres-certs
            mountPath: "/etc/postgres/certs"
        extraVolumes:
          - name: tmp-postgres-certs
            secret:
              secretName: postgres-certs
          - name: postgres-certs
            emptyDir: {}
        extraInitContainers:
          - name: init
            image: busybox
            command:
              - /bin/sh
              - '-c'
              - cp /tmp/tmp-certs/* /tmp/certs && chmod 0400 /tmp/certs/* && chown 1001:1001 /tmp/certs/*
            securityContext:
              runAsNonRoot: false
              runAsUser: 0
            volumeMounts:
              - name: postgres-certs
                mountPath: "/tmp/certs"
              - name: tmp-postgres-certs
                mountPath: "/tmp/tmp-certs"
        envFrom:
        - secretRef:
            name: hoprd-nodes
        - secretRef:
            name: rabbitmq-production
        - secretRef:
            name: postgres-credentials
        service:
          type: ClusterIP
          ports:
            http: 8080
  destination:
    server: https://kubernetes.default.svc
    namespace: production
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: true
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true
